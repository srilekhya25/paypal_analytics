# -*- coding: utf-8 -*-
"""Copy of PayPal Data Generator for Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JCijm2QcicSZOqrWpsL91lhczKzFb8x-
"""

!pip install faker
import pandas as pd
import numpy as np
from faker import Faker
import random

# Initialize Faker to generate realistic-looking data
fake = Faker()

# Define the number of rows for our dataset
# This can be changed to a larger number (e.g., 5,000,000) for a bigger dataset
n = 1000000

# 1. Generate the raw transaction data
# We use Faker and random choices to create a variety of data points
print("Generating raw transaction data...")
transaction_data = {
    "transaction_id": [i for i in range(1, n + 1)],
    "customer_id": [fake.uuid4()[:8] for _ in range(n)],
    "merchant_id": [f"M{random.randint(100, 500)}" for _ in range(n)],
    "transaction_date": [fake.date_time_between(start_date="-1y", end_date="now") for _ in range(n)],
    "amount": [round(random.uniform(5, 2000), 2) for _ in range(n)],
    "currency": [random.choice(["USD", "EUR", "INR", "GBP"]) for _ in range(n)],
    "country": [random.choice(["US", "IN", "UK", "DE", "FR", "SG"]) for _ in range(n)],
    "payment_method": [random.choice(["Card", "PayPal", "Bank", "Crypto"]) for _ in range(n)],
    "status": [random.choices(["Success", "Failed", "Refund", "Fraud_Suspected"], weights=[0.85, 0.1, 0.03, 0.02])[0] for _ in range(n)]
}

# Create a Pandas DataFrame from the generated data
df = pd.DataFrame(transaction_data)

# 2. Add the 'failure_reason' column based on the transaction status
print("Adding failure reasons...")
df["failure_reason"] = df.apply(
    lambda row: random.choice(["Card_Decline", "Insufficient_Funds", "Fraud_Flag", "Network_Error"])
    if row["status"] in ["Failed", "Fraud_Suspected"] else None, axis=1)

# 3. Save the DataFrame to a CSV file
# This file will be saved directly in your Google Colab environment
output_file = "paypal_transactions.csv"
print(f"Saving data to {output_file}...")
df.to_csv(output_file, index=False)

# 4. Display a confirmation message and a sample of the data
print("Data generation complete!")
print(f"The file '{output_file}' has been created with {len(df)} rows.")
print("\nSample data (first 5 rows):")
print(df.head())

